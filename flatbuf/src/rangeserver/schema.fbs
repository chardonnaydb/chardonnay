namespace RangeServer;

table Uuidu128 {
  lower:uint64;
  upper:uint64;
}

table RangeId {
  keyspace_id:Uuidu128;
  range_id:Uuidu128;
}

table EpochLease {
  lower_bound_inclusive:uint64;
  upper_bound_inclusive:uint64;
}

table Key {
  k:[ubyte];
}

table Record {
    key:Key;
    value:[ubyte];
}

table GetRequest {
  request_id:Uuidu128;
  transaction_id:Uuidu128;
  range_id:RangeId;
  keys:[Key];
}

table GetResponse {
  request_id:Uuidu128;
  leader_sequence_number:int64;
  records:[Record];
}

table PrepareRequest {
  request_id:Uuidu128;
  transaction_id:Uuidu128;
  range_id:RangeId;
  has_reads:bool;
  puts:[Record];
  deletes:[Key];
}

table PrepareResponse {
  request_id:Uuidu128;
  status:bool;
  highest_known_epoch:uint64;
  epoch_lease:EpochLease;
}

table CommitRequest {
  request_id:Uuidu128;
  transaction_id:Uuidu128;
  range_id:RangeId;
  epoch:uint64;
  vid:int64;
}

table CommitResponse {
  request_id:Uuidu128;
  status:bool;
}

table AbortRequest {
  request_id:Uuidu128;
  transaction_id:Uuidu128;
  range_id:RangeId;
}

table AbortResponse {
  request_id:Uuidu128;
  status:bool;
}

enum Entry:byte { Prepare = 0, Commit, Abort = 2 }

table LogEntry {
  entry:Entry;
  bytes:[ubyte];
}

root_type LogEntry;